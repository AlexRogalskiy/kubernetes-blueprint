# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Blueprint for deploying a Kubernetes cluster through Mist.io
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

tosca_definitions_version: cloudify_dsl_1_2

# # # # # # # # # # # # # # i# # # # # # # # # # # # # # # #
# Imports section
# Importing the Mist.io-Cloudify Plugin
# # # # # # # # # # # # # # i# # # # # # # # # # # # # # # #

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3m5/types.yaml
  - http://raw.githubusercontent.com/mistio/cloudify-mist-plugin/master/plugin.yaml

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Inputs section
# To specify deployment inputs run:
#   cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

inputs:
  mist_uri:
    description: The Mist.io URI
    type: string
    default: 'https://mist.io'
  mist_username:
    description: Username of the Mist.io user
    type: string
    default: ''
  mist_password:
    description: Password of the Mist.io user
    type: string
    default: ''
  mist_token:
    description: An API Token generated by Mist.io in order to be used with every request
    type: string
    default: ''
  mist_cloud_1:
    description: The ID of the cloud on which the machines will be provisioned
    type: string
    default: ''
  mist_image_1:
    description: The ID of the image to be used for each VM
    type: string
    default: ''
  mist_size_1:
    description: The ID of the VMs' instance type
    type: string
    default: ''
  mist_location_1:
    description: The ID of the VM's location
    type: string
    default: ''
  mist_key_master:
    description: The ID of the SSH key to be deployed on the Kubernetes Master
    type: string
    default: ''
  mist_key_worker:
    description: The ID of the SSH key to be deployed on the Kubernetes Worker
    type: string
    default: ''
  use_existing_resources:
    description: Denotes whether to use existing VMs to setup the cluster. The default behavior is to provision new resources.
    type: boolean
    default: false
  mist_resource_id_master:
    description: The ID of the VM to use as the Kubernetes Master. This is required if use_existing_resources is enabled.
    type: string
    default: ''
  mist_resource_id_worker:
    description: The ID of the VM to use as the Kubernetes Worker. This is required if use_existing_resources is enabled.
    type: string
    default: ''
  ssh_user:
    description: The SSH user. If left blank, Mist.io will try to auto-discover
    type: string
    default: ''
  mist_networks_1:
    description: Networks that the machines will join
    default: []
  auth_user:  # TODO can be a separate data type
    description: The username used for accessing the Kubernetes dashboard
    type: string
    default: 'admin'
  auth_pass:
    description: The password used for accessing the Kubernetes dashboard. If left blank, the password will be auto-generated
    type: string
    default: ''

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Declaration of Kubernetes node_types
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

node_types:
  cloudify.mist.nodes.KubernetesMaster:
    derived_from: cloudify.mist.nodes.Server
    properties:
      configured:
        description: >
          Indicates whether Kubernetes is already configured
        type: boolean
        default: false
      master:
        description: >
          Indicates the Kubernetes Master node
        type: boolean
        default: true
      auth_user:
        description: >
          The username used for accessing the Kubernetes dashboard
        default: 'admin'
      auth_pass:
        description: >
          The password used for accessing the Kubernetes dashboard
        default: ''
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: tasks/stop.py
        create:
          implementation: tasks/create.py
          inputs:
            node_type:
              default: 'master'
        configure:
          implementation: tasks/configure.py
          inputs:
            start_retry_interval:
              description: Polling interval until the server is active (in seconds)
              type: integer
              default: 30

  cloudify.mist.nodes.KubernetesWorker:
    derived_from: cloudify.mist.nodes.Server
    properties:
      configured:
        description: >
          Indicates whether Kubernetes is already configured
        type: boolean
        default: false
      master:
        description: >
          Indicates the Kubernetes Master node
        type: boolean
        default: false
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: tasks/stop.py
        clone: tasks/clone.py
        create:
          implementation: tasks/create.py
          inputs:
            node_type:
              default: 'worker'
        configure:
          implementation: tasks/configure.py
          inputs:
            start_retry_interval:
              description: Polling interval until the server is active (in seconds)
              type: integer
              default: 30

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Kubernetes node_templates
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

node_templates:
  kube_master:
    type: cloudify.mist.nodes.KubernetesMaster
    properties:
      use_external_resource: { get_input: use_existing_resources }
      resource_id: { get_input: mist_resource_id_master }
      parameters:
        cloud_id: { get_input: mist_cloud_1 }
        image_id: { get_input: mist_image_1 }
        size_id: { get_input: mist_size_1 }
        location_id: { get_input: mist_location_1 }
        networks: { get_input: mist_networks_1 }
        key: { get_input: mist_key_master }
      mist_config:
        mist_token: { get_input: mist_token }
        mist_username: { get_input: mist_username }
        mist_password: { get_input: mist_password }
        mist_uri: { get_input: mist_uri }
      auth_user: { get_input: auth_user }
      auth_pass: { get_input: auth_pass }

  kube_worker:
    type: cloudify.mist.nodes.KubernetesWorker
    properties:
      use_external_resource: { get_input: use_existing_resources }
      resource_id: { get_input: mist_resource_id_worker }
      parameters:
        cloud_id: { get_input: mist_cloud_1 }
        image_id: { get_input: mist_image_1 }
        size_id: { get_input: mist_size_1 }
        location_id: { get_input: mist_location_1 }
        networks: { get_input: mist_networks_1 }
        key: { get_input: mist_key_worker }
      mist_config:
        mist_token: { get_input: mist_token }
        mist_username: { get_input: mist_username }
        mist_password: { get_input: mist_password }
        mist_uri: { get_input: mist_uri }
    relationships:
      - target: kube_master
        type: cloudify.relationships.connected_to

  # TODO relationship to kube_master
  master_key:
    type: cloudify.mist.nodes.KeyPair
    properties:
      use_external_resource: false
      private_key_path: ''
      resource_id: { get_input: mist_key_master }
      mist_config:
        mist_token: { get_input: mist_token }
        mist_username: { get_input: mist_username }
        mist_password: { get_input: mist_password }
        mist_uri: { get_input: mist_uri }

  worker_key:
    type: cloudify.mist.nodes.KeyPair
    properties:
      use_external_resource: false
      private_key_path: ''
      resource_id: { get_input: mist_key_worker }
      mist_config:
        mist_token: { get_input: mist_token }
        mist_username: { get_input: mist_username }
        mist_password: { get_input: mist_password }
        mist_uri: { get_input: mist_uri }

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Declaration of workflows for scaling the Kubernetes cluster
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

workflows:
  scale_cluster_up:
    mapping: workflows/scale_up.py
    parameters:
      delta:
        description: >
          The number of worker nodes to be added to the cluster. The value
          must be greater than 0 for the workflow to be run.
        type: integer
        default: 1
      use_existing_resources:
        description: >
          Denotes whether to use existing VMs to scale up the cluster. The
          default behavior is to provision new resources.
        type: boolean
        default: false
      mist_resource_ids:
        description: >
          The IDs of the VMs to use as the new Kubernetes Worker. This is
          required if use_existing_resources is enabled. Note that the delta
          parameter will also be ignored, if existing resources are used for
          scaling up the cluster. Instead, the delta will be determinted by
          the length of the mist_resource_ids list.
        default: []
      mist_cloud:
        description: >
          The ID of the cloud on which the machines will be provisioned. This
          parameter is always required. Even if use_existing_resources is on.
        type: string
      mist_image:
        description: >
          The ID of the image to be used. Note that this image will be used
          for each VM provisioned. If the use_existing_resources flag is on,
          then this parameter is not required and will be ignored if set.
        type: string
        default: ''
      mist_size:
        description: >
          The ID of the instance type to be uses. Note that the same instance
          type will be used for each VM provisioned. If use_existing_resources
          has been enabled, then this parameter is not required and will be
          ignored if set.
        type: string
        default: ''
      mist_location:
        description: >
          The ID of the VMs' location. Note that all provisioned VMs are going
          to be deployed at this location/datacenter. If the cloud does not
          support locations, this parameter can be safely ignored. If the flag
          use_existing_resources has been enabled, then this parameter is not
          required and will be ignored if set.
        type: string
        default: ''
      mist_networks:
        description: >
          The IDs of the networks each VM should be associated with. If the
          use_existing_resources flag is on, this parameter is not required
          and will be ignored if set.
        default: []
      mist_key:
        description: >
          The ID of the SSH key to be deployed on each VM. Note that the same
          SSH key is going to be deployed on every provisioned machine. Given
          use_existing_resources has been enabled, then this paramter is not
          required and will be ignored if set.
        type: string
        default: ''

  scale_cluster_down:
    mapping: workflows/scale_down.py
    parameters:
      mist_cloud:
        description: The ID of the cloud on which the VM is deployed
        type: string
        default: ''
      worker_name:
        description: The name of the worker instance to be removed from the cluster
        type: string
        default: ''
      delta:
        description: Denotes the number of worker nodes to be removed from the cluster
        type: integer
        default: 0

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Outputs expose the application's endpoints
# You can access them by running:
#   cfy deployments -d <deployment_id> outputs
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

outputs:
  master:
    description: Kubernetes master node's IP address
    value:
      ip: { get_attribute: [ kube_master, server_ip ] }
  kubectl:
    description: Kubernetes cluster-info command
    value:
      command: { concat: [ 'kubectl --insecure-skip-tls-verify
                           --server="https://', { get_attribute: [ kube_master, server_ip ] },
                           '" --username="', { get_attribute: [ kube_master, auth_user ] },
                           '" --password="', { get_attribute: [ kube_master, auth_pass ] },
                           '" cluster-info' ] }
  dashboard:
    description: Kubernetes dashboard URL
    value:
      command: { concat: [ 'kubectl --insecure-skip-tls-verify
                           --server="https://', { get_attribute: [ kube_master, server_ip ] },
                           '" --username="', { get_attribute: [ kube_master, auth_user ] },
                           '" --password="', { get_attribute: [ kube_master, auth_pass ] },
                           '" proxy' ] }
      url: http://localhost:8001/ui
      username: { get_attribute: [ kube_master, auth_user ] }
      password: { get_attribute: [ kube_master, auth_pass ] }
